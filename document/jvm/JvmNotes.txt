1.jvm系统架构图，详见jvm_structure.png

2.
	2.1 4种类加载器
	（1）bootstrap
	（2）ExtClassLoader
	（3）AppClassLoader
	（4）自定义类加载器
	2.2双亲委派机制
	2.3沙箱安全机制

3. native 
	3.1 native是Java的关键字
	3.2 有声明 无实现
	
4. PC 寄存器（project counter register）
	记录了方法之间调用和执行的情况，用来存储下一条指令的地址，即将要执行指令的代码
	它是当前线程所执行的字节码的行号指示器
	
5. 方法区
	5.1 线程共享的内存区域
	5.2 它存储了每一个类的结构信息，例如运行常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容
	5.3 方法区是规范，在不同虚拟机里的实现是不一样的，最典型的是java7的永久代（PermGen Space），和java8的元空间（MetaSpace）

6. stack
	stack管运行，heap管存储
	栈也叫栈内存，主管java程序的运行，是在线程创建的时候创建，它的生命周期是跟随线程的生命周期，线程结束栈内存也就释放
	对于栈来说不存在GC的问题，是线程私有的
	java的8种基本数据类型的变量、对象引用的变量、实例方法都是在函数的栈内存中分配
	遵循FILO原则
	
	6.1 栈帧（Stack Frame）
		每个方法执行的时候就会创建一个栈帧，保存到栈的顶部，顶部栈就是当前的方法，该方法执行完毕后会自动将此栈帧出栈
		栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息
		每一个方法从调用至执行完毕的过程，就对应的一个栈帧在虚拟机中入栈到出栈的过程
		栈的大小和具体JVM的实现有关，通常在256k~756K之间
	
	6.2 栈帧中主要存储3类数据
		本地变量（Local Variables）:输入参数+输出参数+方法内的变量；
		栈操作（Operand Stack）：记录出栈、入栈的操作（类似PC寄存器）；
		栈帧数据（Frame Data）: 包括类文件、方法等等。
	
	6.3 java.lang.StackOverFlowError

7.	堆Heap
	一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常量变量放到堆内存中，保存所有引用类型的真实信息
	堆内存逻辑上分为三部分（物理上只有两部分：新生区，占1/3空间+养老区2/3空间）：
		1. Young Generation Space 新生区  Young/New， 新生区又分为三大部分：
			（1） 伊甸园区（Eden Space）。eden区满时开始Young GC（轻量级GC/Minor GC）
			（2） 幸存者0区（Survive0），又叫from区
			（3） 幸存者1区（Survive1），又叫to区
			注：
				①from区和to区，他们的位置和名分不是固定的，每次GC：复制之后有交换，谁空谁是to
				②Eden Space、Survive0、Survive1默认比例8:1:1，即Survive0和Survive1实际物理内存大小相等
				
		2. Tenure Generation Space 养老区 Old/Tenure
		3. Permanent Space 永久区         Perm
			永久区是一个常驻内存区域，用于存放jdk自带的Class,Interface等元数据，即运行环境必须的类信息；
			被装载进此区的数据是不会被GC的，关闭jvm才会释放此空间占用的内存；
			java8中永久代已经被移除，被元空间取代。元空间本质和永久代类似，区别在于：永久代使用的是jvm的堆内存，而元空间使用的是本机物理内存。因此在默认情况下，元空间的大小仅受本地内存限制。
		
	如果出现OOM，说明JAVA虚拟机的堆内存不够，原因有二：
		（1） JAVA虚拟机的内存设置不够，可以通过参数 -Xms -Xmx来调整
		（2） 代码中创建了大量的大对象，并且长时间不能被GC（存在被引用）

8. GC
	8.1 四大GC算法：引用计数法、复制算法、标记清楚、标记压缩
	
	8.2 四大引用类型：强引用、软引用、弱引用、虚引用
	
		强引用：强引用是最常见的普通对象引用，只要还有一个强引用指向一个对象，垃圾回收器就不会触碰这个对象；
				当一个对象被强引用变量引用时，它处于可达状态，是不能被GC的，即使该对象以后永远都不会用到也不会被GC;
				因此强引用是造成OOM的主要原因；
				对于一个普通对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将（强）引用值改为Null，一般认为就是可以被GC了。
		软引用：软引用是一种相对强引用弱化了的引用，需要用java.lang.ref.SoftReference来实现；
				对于只有被软引用的对象来说，当系统内存充足时不会被GC，当系统内存不足时才被GC；
				软引用通常用在对内存敏感的程序中，比如高速缓存。
		弱引用：不管内存是否够用只要GC了一定回收；
		        需要用java.lang.ref.WeakReference类来实现
		虚引用：需要使用java.lang.ref.PhantomReference类来实现；
                如果一个对象仅持有虚引用，那么它就跟没有任何引用一样，在任何时候都可能被GC，它不能单独使用也不能通过它访问对象；
                虚引用的get()方法总为null
                虚引用必须和引用队列（ReferenceQueue）联合使用。
		

9. JVM调优
	VM参数：   
			-Xms1024m 最小分配堆内存 等价于 -XX:InitialHeapSize=1024m
			-Xmx 最大分配堆内存 等价于 -XX：MaxHeapSize=1024m
			-Xss 最小分配栈内存（单个线程栈大小？？？） 等价于-XX:ThreadStackSize
			-Xmn 新生代大小，一般不调
			-XX:+PrintGCDetails 打印GC细节
			-XX:SurvivorRatio=i 设置eden,s0,s1区的内存分配比例为i:1:1。默认值为8.
			-XX:NewRatio=i   设置老年代占比为i，新生代为1。默认值为2。
			-XX:MaxTenuringThreshold  设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过survivor区，直接进入老年代。java8规定这个参数值必须在0-15。
			 
	命令行：
			jps -l     查看java进程
			jstack 进程ID
			jinfo -flag 配置项 进程ID    查看有没有开启这个功能
						PrintGCDetails
						UseSerialGC
					    MetaSpaceSize
						MaxTenuringThreshold
						InitialHeapSize
			jinfo -flags 进程ID     打印出目前能搜索到的全部参数（能打印出两组，一组是JVM自带，一组是手动配置）
			java -XX:+PrintFlagsInitial      盘点jvm各项初始参数
			java -XX:+PrintFlagsFinal -version       盘点修改后的各项jvm参数("="是初始值，":="是修改后的值)
			java -XX:+PrintCommandLineFlags -version