单一职责
接口隔离
	不实现没有用的方法
依赖倒置（面向接口编程）
里式替换
	子类尽量少重写父类方法
开闭
迪米特（最少知道）
	只于直接的朋友打交道
	直接的朋友： 成员变量、方法参数、方法返回值
	不直接的朋友： 方法中局部变量
合成复用 
	尽量使用合成/聚合，而不是继承
	
设计核心思想：
1. 针对接口编程，而不是针对实现编程
2. 找出应用中可能需要变化之处，把他们独立开，不要跟那些不需要变化的混到一起
3. 为了交互对象之间的松耦合而努力

创建型模式（5）：单例、工厂、抽象工厂、建造者、原型
结构型模式（7）：适配器、桥接、装饰、组合（部分整体）、外观（过程、门面）、享元（蝇量）、代理（静态、动态、cglib）
行为型模式（11）：模板方法、命令、访问者、迭代器、观察者、中介者、备忘录、解释器、状态、策略、责任链

单例模式应用：Runtime 是通过饿汉式创建的
原型模式应用：Spring里创建bean （bean里有个scope属性 scope=“prototype”）
建造者模式应用：StringBuilder
适配器模式应用：handler adapter in SpringMVC
享元模式应用：Integer.valueOf() -127 ~ 128
模板方法模式应用： Spring中的Ioc容器初始化